trigger:
- publish

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  shouldPublish: $[eq(variables['Build.SourceBranch'], 'refs/heads/publish')]

steps:
- task: DotNetCoreCLI@2
  displayName: Pack https
  condition: eq(variables.shouldPublish, true)
  inputs:
    command: pack
    publishWebProjects: false
    packagesToPack: '**/https.csproj'
    configuration: $(buildConfiguration)
    packDirectory: $(build.ArtifactStagingDirectory)
    versioningScheme: off

- task: DotNetCoreCLI@2
  displayName: Pack https
  condition: eq(variables.shouldPublish, false)
  inputs:
    command: pack
    publishWebProjects: false
    packagesToPack: '**/https.csproj'
    configuration: $(buildConfiguration)
    packDirectory: $(build.ArtifactStagingDirectory)
    versioningScheme: byPrereleaseNumber
    majorVersion: 0
    minorVersion: 2
    patchVersion: 0

- task: DotNetCoreCLI@2
  displayName: Test https
  inputs:
    command: test
    projects: '**/https.Tests.csproj'
    arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura -- xunit.parallelizeAssembly=true xunit.parallelizeTestCollections=true'

- script: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    dotnet reportgenerator -reports:$(Build.SourcesDirectory)/tests/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:Cobertura
  displayName: Code Coverage Report

- task: PublishBuildArtifacts@1
  displayName: Upload Artifacts
  inputs:
    PathtoPublish: '$(build.ArtifactStagingDirectory)'
    ArtifactName: 'https'
    Parallel: true

